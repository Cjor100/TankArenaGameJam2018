<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_bot_debug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !audio_is_playing(sound_idle2)
    audio_play_sound(sound_idle2,1,true)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
fire_right=false
fire_left=false
fire_up=false
fire_down=false
can_fire=true
can_move=true
stuck=false
bullet_speed=6
botHP = 100;
adjacent=ds_list_create()
gx=0
gy=0


//Align to grid
sprite_index = sprite_bot
x+=32
y+=32

// Create Grid
cell_width = 64
cell_height = 64

hcells = room_width div cell_width
vcells = room_height div cell_height

grid = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)

// Register obsticles
mp_grid_add_instances(grid,obj_wall,true)

//Create path
path = path_add()

//mp_grid_destroy(global.grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(sound_idle2)
audio_stop_sound(sound_move2)
audio_play_sound(sound_explosion, true, false)
instance_create(x,y,obj_explosion)
instance_create(x,y,obj_destroyed)
(instance_nearest(x,y,obj_destroyed)).image_angle=image_angle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_move=true
stuck=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.unlocked){
sprite_index = sprite_hatch_open
}
if (distance_to_object(obj_player)&lt;10)
{
if(global.unlocked){
if(tutChange){
room_goto(room_menu);
}else{
if(global.playerHP == 100){
global.flawless++;
}
room_goto_next();

}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_fire=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(botHP &lt;= 0){ instance_destroy();}
//Movement
if (global.monsterTank)
    {
        if (path=-1)
            sprite_index = sprite_bot_monster
        else
            sprite_index = sprite_bot_monster_moving
            
            image_angle = direction-90;
    }
else
    {
        if (path=-1)
            sprite_index = sprite_bot
        else
            sprite_index = sprite_bot_moving
            
            image_angle = direction-90;
    }
    
if (distance_to_object(obj_player)&lt;10)
    {
        if (point_distance(obj_player.x,0,x,0)&gt;10 &amp;&amp; R&gt;1)
            {
                path_end()
                x+=5
            }
        if (point_distance(obj_player.x,0,x,0)&gt;10 &amp;&amp; L&gt;1)
            {
                path_end()
                x-=5
            }
        if (point_distance(0,obj_player.y,0,y)&gt;10 &amp;&amp; U&gt;1)
            {
                path_end()
                y-=5
            }
        if (point_distance(0,obj_player.y,0,y)&gt;10 &amp;&amp; D&gt;1)
            {
                path_end()
                y+=5
            }
        if(global.monsterTank == false){
        botHP-=1;
        global.playerHP -= 1;
        }else{
        botHP-=20;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sound
if (path_index!=-1)
    {
        if !audio_is_playing(sound_move2)
            audio_play_sound(sound_move2,1,true)
    }
else
    {
        audio_stop_sound(sound_move2)
     }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Find current navgrid
instanceid = instance_nearest((x div 64)*64+32,(y div 64)*64+32,obj_nav_node) 
Nav_ID = ((instanceid).ID)
instanceid.bot=true

//Raytrace
for (R=0; R&lt;16; R++)//Right raytrace
    {
        if ((instanceid+R).ID mod 16==0)
            {
                fire_right=false
                break
            }
        else if (instanceid+R).blocked==true
            {
                fire_right=false
                break
            }
        else if (instanceid+R).player==true
            {
                fire_right=true
                break
            }
        else if ((instanceid+R).bot==true &amp;&amp; R!=0)
            {
                fire_right=false
                break
            }
    }
for (L=0; L&lt;16; L++)//Left raytrace
    {
        if (((instanceid-L).ID-1) mod 16==0)
            {
                fire_left=false
                break
            }
        else if (instanceid-L).blocked==true
            {
                fire_left=false
                break
            }
        else if (instanceid-L).player==true
            {
                fire_left=true
                break
            }
        else if ((instanceid-L).bot==true &amp;&amp; L!=0)
            {
                fire_right=false
                break
            }
    }
for (U=0; U&lt;16; U++)//Up raytrace
    {
        if (((instanceid-(U*16)).ID)&lt;=16)
            {
                fire_up=false
                break
            }
        else if (instanceid-(U*16)).blocked==true
            {
                fire_up=false
                break
            }
        else if (instanceid-(U*16)).player==true
            {
                fire_up=true
                break
            }
        else if ((instanceid-(U*16)).bot==true &amp;&amp; U!=0)
            {
                fire_right=false
                break
            }
    }
for (D=0; D&lt;16; D++)//Down raytrace
    {
        if (((instanceid+(D*16)).ID)&gt;=177)
            {
                fire_down=false
                break
            }
        else if (instanceid+(D*16)).blocked==true
            {
                fire_down=false
                break
            }
        else if (instanceid+(D*16)).player==true
            {
                fire_down=true
                break
            }
        else if ((instanceid+(D*16)).bot==true &amp;&amp; D!=0)
            {
                fire_right=false
                break
            }
    }

//Firing mechanism 
if (fire_right &amp;&amp; can_fire)
    {
        instance_create(x,y,obj_bot_bullet)
        (instance_nearest(x,y,obj_bot_bullet)).hspeed=+bullet_speed
        can_fire=false
        alarm[0]=60
        path_end()
        direction=0
        can_move=false
        alarm[2]=15
    }
else if (fire_left &amp;&amp; can_fire)
    {
        instance_create(x,y,obj_bot_bullet)
        (instance_nearest(x,y,obj_bot_bullet)).hspeed=-bullet_speed
        can_fire=false
        alarm[0]=60
        path_end()
        direction=180
        can_move=false
        alarm[2]=15
    }
else if (fire_up &amp;&amp; can_fire)
    {
        instance_create(x,y,obj_bot_bullet)
        (instance_nearest(x,y,obj_bot_bullet)).vspeed=-bullet_speed
        can_fire=false
        alarm[0]=60
        path_end()
        direction=90
        can_move=false
        alarm[2]=15
    }
else if (fire_down &amp;&amp; can_fire)
    {
        instance_create(x,y,obj_bot_bullet)
        (instance_nearest(x,y,obj_bot_bullet)).vspeed=+bullet_speed
        can_fire=false
        alarm[0]=60
        path_end()
        direction=270
        can_move=false
        alarm[2]=15
    }

//Movement mechanism
//Get Adjacent nodes
ds_list_clear(adjacent)
if ((instance_nearest(x,y,obj_player)).R&gt;=3)
    {
        ds_list_add(adjacent,((instance_nearest(x,y,obj_player)).instanceid+3))
    }
if ((instance_nearest(x,y,obj_player)).L&gt;=3)
    {
        ds_list_add(adjacent,((instance_nearest(x,y,obj_player)).instanceid-3))
    }
if ((instance_nearest(x,y,obj_player)).U&gt;=3)
    {
        ds_list_add(adjacent,((instance_nearest(x,y,obj_player)).instanceid-48))
    }
if ((instance_nearest(x,y,obj_player)).D&gt;=3)
    {
        ds_list_add(adjacent,((instance_nearest(x,y,obj_player)).instanceid+48))
    }

//Sort distance
minvalue=0
if (!ds_list_empty(adjacent))
    {
        for (a=0; a&lt;ds_list_size(adjacent); a++)
            {
                if (distance_to_point(ds_list_find_value(adjacent,a).x,ds_list_find_value(adjacent,a).y)&lt;=distance_to_point(ds_list_find_value(adjacent,minvalue).x,ds_list_find_value(adjacent,minvalue).y))
                    minvalue=a
            }
    }
ox=gx
oy=gy
gx = (ds_list_find_value(adjacent,minvalue).x div 64)*64+32
gy = (ds_list_find_value(adjacent,minvalue).y div 64)*64+32

//Move to navgrid
if ((ox!=gx || oy!=gy) &amp;&amp; can_move)
{
    if (mp_grid_path(grid,path,x,y,gx,gy,1))
        {
            path_end()
            path_start(path,4,path_action_stop,false)
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lowest=-1
stuck=true
with obj_bot
    {
        if ((distance_to_object(obj_player)&lt;global.lowest || global.lowest==-1) &amp;&amp; stuck)
            global.lowest=distance_to_object(obj_player)
    }

if (global.lowest!=distance_to_object(obj_player))
    {
        path_end()
        can_move=false
        alarm[1]=30
        alarm[2]=30
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx = (mouse_x div 64)*64+32
my = (mouse_y div 64)*64+32

if (mp_grid_path(grid,path,x,y,mx,my,1))
    {
        path_start(path,4,path_action_stop,false)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if (global.monsterTank)
    {
        if (botHP==100)
            draw_sprite_ext(sprite_damaged_bot,0,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=75)
            draw_sprite_ext(sprite_damaged_bot,1,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=50)
            draw_sprite_ext(sprite_damaged_bot,2,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=25)
            draw_sprite_ext(sprite_damaged_bot,3,x,y,1,1,image_angle,c_white,1)
    }
else 
    {
        if (botHP==100)
            draw_sprite_ext(sprite_damaged,0,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=75)
            draw_sprite_ext(sprite_damaged,1,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=50)
            draw_sprite_ext(sprite_damaged,2,x,y,1,1,image_angle,c_white,1)
        if (botHP&lt;=25)
            draw_sprite_ext(sprite_damaged,3,x,y,1,1,image_angle,c_white,1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
